/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "config.h"
#include "controller.h"
#include "oem.h"



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Config_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Config *arg1 = (Config *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Config_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Config *arg1 = (Config *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  result =  ((arg1)->port);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Config_1baudrate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Config *arg1 = (Config *) 0 ;
  uint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  arg2 = (uint)jarg2; 
  if (arg1) (arg1)->baudrate = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Config_1baudrate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Config *arg1 = (Config *) 0 ;
  uint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  result = (uint) ((arg1)->baudrate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Config_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Config *arg1 = (Config *) 0 ;
  uint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  arg2 = (uint)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Config_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Config *arg1 = (Config *) 0 ;
  uint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  result = (uint) ((arg1)->id);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Config_1filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Config *arg1 = (Config *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->filename = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Config_1filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Config *arg1 = (Config *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  result =  ((arg1)->filename);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Config_1action_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Config *arg1 = (Config *) 0 ;
  uint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  arg2 = (uint)jarg2; 
  if (arg1) (arg1)->action = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Config_1action_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Config *arg1 = (Config *) 0 ;
  uint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Config **)&jarg1; 
  result = (uint) ((arg1)->action);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_new_1Config(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Config *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Config *)new Config();
  *(Config **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_delete_1Config(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Config *arg1 = (Config *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Config **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_new_1LedLocker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  LedLocker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (LedLocker *)new LedLocker(arg1);
  *(LedLocker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_delete_1LedLocker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LedLocker *arg1 = (LedLocker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LedLocker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_handlerUiPolling_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  handlerUiPolling(arg1);
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_handlerUiPolling_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  handlerUiPolling();
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_new_1Controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CCommSerial *arg1 = (CCommSerial *) 0 ;
  Controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CCommSerial **)&jarg1; 
  result = (Controller *)new Controller(arg1);
  *(Controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Controller_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Controller *arg1 = (Controller *) 0 ;
  Helper *arg2 = (Helper *) 0 ;
  void (*arg3)(void *) = (void (*)(void *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  arg2 = *(Helper **)&jarg2; 
  arg3 = *(void (**)(void *))&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1saveImageToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__saveImageToFile();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__open();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1enroll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__enroll();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1getUserCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__getUserCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__verify();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1deleteId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__deleteId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1identify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__identify();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1deleteAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__deleteAll();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1verifyTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__verifyTemplate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1getTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__getTemplate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1identifyTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__identifyTemplate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1setTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__setTemplate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1isPressedFinger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__isPressedFinger();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1getDatabase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__getDatabase();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__getImage();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1setDatabase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__setDatabase();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1getRawImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__getRawImage();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1cancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__cancel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Controller_1_1_1getLiveImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (int)(arg1)->__getLiveImage();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_delete_1Controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Controller *arg1 = (Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Controller **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1OPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_OPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1CLOSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_CLOSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1USB_1INTERNAL_1CHECK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_USB_INTERNAL_CHECK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1CHANGE_1BAUDRATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_CHANGE_BAUDRATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1CMOS_1LED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_CMOS_LED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1ENROLL_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_ENROLL_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1CHECK_1ENROLLED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_CHECK_ENROLLED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1ENROLL_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_ENROLL_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1ENROLL1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_ENROLL1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1ENROLL2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_ENROLL2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1ENROLL3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_ENROLL3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1IS_1PRESS_1FINGER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_IS_PRESS_FINGER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1DELETE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_DELETE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1DELETE_1ALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_DELETE_ALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1VERIFY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_VERIFY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1IDENTIFY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_IDENTIFY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1VERIFY_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_VERIFY_TEMPLATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1IDENTIFY_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_IDENTIFY_TEMPLATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1CAPTURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_CAPTURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1GET_1IMAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_GET_IMAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1GET_1RAWIMAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_GET_RAWIMAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1GET_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_GET_TEMPLATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1ADD_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_ADD_TEMPLATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1GET_1DATABASE_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_GET_DATABASE_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1GET_1DATABASE_1END_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_GET_DATABASE_END;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1FW_1UPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_FW_UPDATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_CMD_1ISO_1UPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CMD_ISO_UPDATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_ACK_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ACK_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_INFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_TIMEOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1INVALID_1BAUDRATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_INVALID_BAUDRATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1INVALID_1POS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_INVALID_POS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1IS_1NOT_1USED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_IS_NOT_USED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1IS_1ALREADY_1USED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_IS_ALREADY_USED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1COMM_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_COMM_ERR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1VERIFY_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_VERIFY_FAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1IDENTIFY_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_IDENTIFY_FAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1DB_1IS_1FULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_DB_IS_FULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1DB_1IS_1EMPTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_DB_IS_EMPTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1TURN_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_TURN_ERR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1BAD_1FINGER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_BAD_FINGER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1ENROLL_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_ENROLL_FAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1IS_1NOT_1SUPPORTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_IS_NOT_SUPPORTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1DEV_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_DEV_ERR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1CAPTURE_1CANCELED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_CAPTURE_CANCELED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1INVALID_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_INVALID_PARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_NACK_1FINGER_1IS_1NOT_1PRESSED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)NACK_FINGER_IS_NOT_PRESSED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_OEM_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OEM_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_OEM_1COMM_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OEM_COMM_ERR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_devinfo_1FirmwareVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _devinfo *arg1 = (_devinfo *) 0 ;
  uint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_devinfo **)&jarg1; 
  arg2 = (uint)jarg2; 
  if (arg1) (arg1)->FirmwareVersion = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_devinfo_1FirmwareVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _devinfo *arg1 = (_devinfo *) 0 ;
  uint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_devinfo **)&jarg1; 
  result = (uint) ((arg1)->FirmwareVersion);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_devinfo_1IsoAreaMaxSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _devinfo *arg1 = (_devinfo *) 0 ;
  uint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_devinfo **)&jarg1; 
  arg2 = (uint)jarg2; 
  if (arg1) (arg1)->IsoAreaMaxSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_devinfo_1IsoAreaMaxSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _devinfo *arg1 = (_devinfo *) 0 ;
  uint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_devinfo **)&jarg1; 
  result = (uint) ((arg1)->IsoAreaMaxSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_devinfo_1DeviceSerialNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _devinfo *arg1 = (_devinfo *) 0 ;
  uchar *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_devinfo **)&jarg1; 
  arg2 = *(uchar **)&jarg2; 
  {
    size_t ii;
    uchar *b = (uchar *) arg1->DeviceSerialNumber;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uchar *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_devinfo_1DeviceSerialNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _devinfo *arg1 = (_devinfo *) 0 ;
  uchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_devinfo **)&jarg1; 
  result = (uchar *)(uchar *) ((arg1)->DeviceSerialNumber);
  *(uchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_new_1devinfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _devinfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_devinfo *)new _devinfo();
  *(_devinfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_delete_1devinfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _devinfo *arg1 = (_devinfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_devinfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_FP_1MAX_1USERS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(200);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_FP_1TEMPLATE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(498);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_EEPROM_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(16);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_FP_1TEMPLATE_1DB_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((498*(200+1) +(200+1)));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_IMG8BIT_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(256*256);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gbyImg8bit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Oem *arg1 = (Oem *) 0 ;
  uchar *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(uchar **)&jarg2; 
  {
    size_t ii;
    uchar *b = (uchar *) arg1->gbyImg8bit;
    for (ii = 0; ii < (size_t)256*256; ii++) b[ii] = *((uchar *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gbyImg8bit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  uchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (uchar *)(uchar *) ((arg1)->gbyImg8bit);
  *(uchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gbyImgRaw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Oem *arg1 = (Oem *) 0 ;
  uchar *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(uchar **)&jarg2; 
  {
    size_t ii;
    uchar *b = (uchar *) arg1->gbyImgRaw;
    for (ii = 0; ii < (size_t)320*240; ii++) b[ii] = *((uchar *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gbyImgRaw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  uchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (uchar *)(uchar *) ((arg1)->gbyImgRaw);
  *(uchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gbyTemplate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Oem *arg1 = (Oem *) 0 ;
  uchar *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(uchar **)&jarg2; 
  {
    size_t ii;
    uchar *b = (uchar *) arg1->gbyTemplate;
    for (ii = 0; ii < (size_t)498; ii++) b[ii] = *((uchar *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gbyTemplate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  uchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (uchar *)(uchar *) ((arg1)->gbyTemplate);
  *(uchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gbyTemplateDB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Oem *arg1 = (Oem *) 0 ;
  uchar *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(uchar **)&jarg2; 
  {
    size_t ii;
    uchar *b = (uchar *) arg1->gbyTemplateDB;
    for (ii = 0; ii < (size_t)(498*(200+1) +(200+1)); ii++) b[ii] = *((uchar *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gbyTemplateDB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  uchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (uchar *)(uchar *) ((arg1)->gbyTemplateDB);
  *(uchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gwDevID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Oem *arg1 = (Oem *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->gwDevID = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gwDevID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (ushort) ((arg1)->gwDevID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gwLastAck_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Oem *arg1 = (Oem *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->gwLastAck = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gwLastAck_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (ushort) ((arg1)->gwLastAck);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gwLastAckParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gwLastAckParam = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gwLastAckParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int) ((arg1)->gwLastAckParam);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gDevInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Oem *arg1 = (Oem *) 0 ;
  devinfo *arg2 = (devinfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(devinfo **)&jarg2; 
  if (arg1) (arg1)->gDevInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Oem_1gDevInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  devinfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (devinfo *)& ((arg1)->gDevInfo);
  *(devinfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_new_1Oem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CCommSerial *arg1 = (CCommSerial *) 0 ;
  Oem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CCommSerial **)&jarg1; 
  result = (Oem *)new Oem(arg1);
  *(Oem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_Oem_1setCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Oem *arg1 = (Oem *) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(void (**)(void *))&jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->setCallback(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1openPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  std::string *arg2 = 0 ;
  uint arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = (uint)jarg3; 
  result = (int)(arg1)->openPort((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1closePort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->closePort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1openOem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->openOem();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1closeOem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->closeOem();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1usbInternalCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->usbInternalCheck();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1changeBaudrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->changeBaudrate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1cmosLed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->cmosLed(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1enrollCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->enrollCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1checkEnrolled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->checkEnrolled(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1enrollStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->enrollStart(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1enrollNth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->enrollNth(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1isPressFinger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->isPressFinger();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1deleteId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->deleteId(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1deleteAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->deleteAll();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->verify(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1identify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->identify();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1verifyTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->verifyTemplate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1identifyTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->identifyTemplate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1capture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->capture(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->getImage();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1getRawimage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->getRawimage();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1getTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getTemplate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1addTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->addTemplate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1getDatabaseStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->getDatabaseStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1getDatabaseEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  result = (int)(arg1)->getDatabaseEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_classexample_controllerJNI_Oem_1error(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = Oem::error(arg1,arg2);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1capturing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  bool arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (int)(arg1)->capturing(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1downloadingImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (int)(arg1)->downloadingImage(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1loadingImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (int)(arg1)->loadingImage(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1loadingImageRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (int)(arg1)->loadingImageRaw(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_classexample_controllerJNI_Oem_1loadingImageLive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Oem *arg1 = (Oem *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Oem **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (int)(arg1)->loadingImageLive(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_classexample_controllerJNI_delete_1Oem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Oem *arg1 = (Oem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Oem **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

